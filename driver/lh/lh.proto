syntax="proto3";
package lh;

service LiquidhandlingDriver{
rpc AddPlateTo (AddPlateToRequest) returns (AddPlateToReply) {}
rpc Finalize (FinalizeRequest) returns (FinalizeReply) {}
rpc GetCapabilities (GetCapabilitiesRequest) returns (GetCapabilitiesReply) {}
rpc GetOutputFile(GetOutputFileRequest) returns (GetOutputFileReply) {}
rpc Initialize (InitializeRequest) returns (InitializeReply) {}
rpc Message (MessageRequest) returns (MessageReply) {}
rpc RemoveAllPlates (RemoveAllPlatesRequest) returns (RemoveAllPlatesReply) {}
rpc RemovePlateAt (RemovePlateAtRequest) returns (RemovePlateAtReply) {}
}

service LowLevelLiquidhandlingDriver{
rpc AddPlateTo (AddPlateToRequest) returns (AddPlateToReply) {}
rpc Finalize (FinalizeRequest) returns (FinalizeReply) {}
rpc GetCapabilities (GetCapabilitiesRequest) returns (GetCapabilitiesReply) {}
rpc GetOutputFile(GetOutputFileRequest) returns (GetOutputFileReply) {}
rpc Initialize (InitializeRequest) returns (InitializeReply) {}
rpc Message (MessageRequest) returns (MessageReply) {}
rpc RemoveAllPlates (RemoveAllPlatesRequest) returns (RemoveAllPlatesReply) {}
rpc RemovePlateAt (RemovePlateAtRequest) returns (RemovePlateAtReply) {}
rpc Aspirate (AspirateRequest) returns (AspirateReply) {}
rpc Dispense (DispenseRequest) returns (DispenseReply) {}
rpc LoadTips (LoadTipsRequest) returns (LoadTipsReply) {}
rpc Mix (MixRequest) returns (MixReply) {}
rpc Move (MoveRequest) returns (MoveReply) {}
rpc ResetPistons (ResetPistonsRequest) returns (ResetPistonsReply) {}
rpc SetDriveSpeed (SetDriveSpeedRequest) returns (SetDriveSpeedReply) {}
rpc SetPipetteSpeed (SetPipetteSpeedRequest) returns (SetPipetteSpeedReply) {}
rpc UnloadTips (UnloadTipsRequest) returns (UnloadTipsReply) {}
rpc UpdateMetaData (UpdateMetaDataRequest) returns (UpdateMetaDataReply) {}
rpc Wait (WaitRequest) returns (WaitReply){}
}

service HighLevelLiquidhandlingDriver{
rpc AddPlateTo (AddPlateToRequest) returns (AddPlateToReply) {}
rpc Finalize (FinalizeRequest) returns (FinalizeReply) {}
rpc GetCapabilities (GetCapabilitiesRequest) returns (GetCapabilitiesReply) {}
rpc GetOutputFile(GetOutputFileRequest) returns (GetOutputFileReply) {}
rpc Initialize (InitializeRequest) returns (InitializeReply) {}
rpc Message (MessageRequest) returns (MessageReply) {}
rpc RemoveAllPlates (RemoveAllPlatesRequest) returns (RemoveAllPlatesReply) {}
rpc RemovePlateAt (RemovePlateAtRequest) returns (RemovePlateAtReply) {}
rpc Transfer(TransferRequest)returns (TransferReply){}
}

service ExtendedLiquidhandlingDriver {
rpc AddPlateTo (AddPlateToRequest) returns (AddPlateToReply) {}
rpc Finalize (FinalizeRequest) returns (FinalizeReply) {}
rpc GetCapabilities (GetCapabilitiesRequest) returns (GetCapabilitiesReply) {}
rpc GetOutputFile(GetOutputFileRequest) returns (GetOutputFileReply) {}
rpc Initialize (InitializeRequest) returns (InitializeReply) {}
rpc Message (MessageRequest) returns (MessageReply) {}
rpc RemoveAllPlates (RemoveAllPlatesRequest) returns (RemoveAllPlatesReply) {}
rpc RemovePlateAt (RemovePlateAtRequest) returns (RemovePlateAtReply) {}
rpc Aspirate (AspirateRequest) returns (AspirateReply) {}
rpc Dispense (DispenseRequest) returns (DispenseReply) {}
rpc LoadTips (LoadTipsRequest) returns (LoadTipsReply) {}
rpc Mix (MixRequest) returns (MixReply) {}
rpc Move (MoveRequest) returns (MoveReply) {}
rpc ResetPistons (ResetPistonsRequest) returns (ResetPistonsReply) {}
rpc SetDriveSpeed (SetDriveSpeedRequest) returns (SetDriveSpeedReply) {}
rpc SetPipetteSpeed (SetPipetteSpeedRequest) returns (SetPipetteSpeedReply) {}
rpc UnloadTips (UnloadTipsRequest) returns (UnloadTipsReply) {}
rpc UpdateMetaData (UpdateMetaDataRequest) returns (UpdateMetaDataReply) {}
rpc Close (CloseRequest) returns (CloseReply) {}
rpc GetCurrentPosition (GetCurrentPositionRequest) returns (GetCurrentPositionReply) {}
rpc GetHeadState (GetHeadStateRequest) returns (GetHeadStateReply) {}
rpc GetPositionState (GetPositionStateRequest) returns (GetPositionStateReply) {}
rpc GetStatus (GetStatusRequest) returns (GetStatusReply) {}
rpc Go (GoRequest) returns (GoReply) {}
rpc LightsOff (LightsOffRequest) returns (LightsOffReply) {}
rpc LightsOn (LightsOnRequest) returns (LightsOnReply) {}
rpc LoadAdaptor (LoadAdaptorRequest) returns (LoadAdaptorReply) {}
rpc LoadHead (LoadHeadRequest) returns (LoadHeadReply) {}
rpc MoveRaw (MoveRawRequest) returns (MoveRawReply) {}
rpc Open (OpenRequest) returns (OpenReply) {}
rpc SetPositionState (SetPositionStateRequest) returns (SetPositionStateReply) {}
rpc Stop (StopRequest) returns (StopReply) {}
rpc UnloadAdaptor (UnloadAdaptorRequest) returns (UnloadAdaptorReply) {}
rpc UnloadHead (UnloadHeadRequest) returns (UnloadHeadReply) {}
rpc Wait (WaitRequest) returns (WaitReply) {}
}
message MapMessage {
map<string,string>map_field=1;
}
message AnyMessage{
string Arg_1=1;
}
message GetCapabilitiesRequest {
}
message GetCapabilitiesReply {
LHPropertiesMessage Ret_1 = 1;
CommandStatusMessage Ret_2 = 2;
}
message LoadTipsRequest {
ArrayOfint64 arg_1 = 1;
int64 arg_2 = 2;
int64 arg_3 = 3;
ArrayOfstring arg_4 = 4;
ArrayOfstring arg_5 = 5;
ArrayOfstring arg_6 = 6;
}
message LoadTipsReply {
CommandStatusMessage Ret_1 = 1;
}
message RemoveAllPlatesRequest {
}
message RemoveAllPlatesReply {
CommandStatusMessage Ret_1 = 1;
}
message UnloadTipsRequest {
ArrayOfint64 arg_1 = 1;
int64 arg_2 = 2;
int64 arg_3 = 3;
ArrayOfstring arg_4 = 4;
ArrayOfstring arg_5 = 5;
ArrayOfstring arg_6 = 6;
}
message UnloadTipsReply {
CommandStatusMessage Ret_1 = 1;
}
message WaitRequest {
double arg_1 = 1;
}
message WaitReply {
CommandStatusMessage Ret_1 = 1;
}
message FinalizeRequest {
}
message FinalizeReply {
CommandStatusMessage Ret_1 = 1;
}
message LoadHeadRequest {
int64 arg_1 = 1;
}
message LoadHeadReply {
CommandStatusMessage Ret_1 = 1;
}
message UpdateMetaDataRequest {
PtrToLHPropertiesMessage arg_1 = 1;
}
message UpdateMetaDataReply {
CommandStatusMessage Ret_1 = 1;
}
message LightsOnRequest {
}
message LightsOnReply {
CommandStatusMessage Ret_1 = 1;
}
message DispenseRequest {
ArrayOfdouble arg_1 = 1;
ArrayOfbool arg_2 = 2;
int64 arg_3 = 3;
int64 arg_4 = 4;
ArrayOfstring arg_5 = 5;
ArrayOfstring arg_6 = 6;
ArrayOfbool arg_7 = 7;
}
message DispenseReply {
CommandStatusMessage Ret_1 = 1;
}
message GetPositionStateRequest {
string arg_1 = 1;
}
message GetPositionStateReply {
string Ret_1 = 1;
CommandStatusMessage Ret_2 = 2;
}
message InitializeRequest {
}
message InitializeReply {
CommandStatusMessage Ret_1 = 1;
}
message RemovePlateAtRequest {
string arg_1 = 1;
}
message RemovePlateAtReply {
CommandStatusMessage Ret_1 = 1;
}
message SetPipetteSpeedRequest {
int64 arg_1 = 1;
int64 arg_2 = 2;
double arg_3 = 3;
}
message SetPipetteSpeedReply {
CommandStatusMessage Ret_1 = 1;
}
message AspirateRequest {
ArrayOfdouble arg_1 = 1;
ArrayOfbool arg_2 = 2;
int64 arg_3 = 3;
int64 arg_4 = 4;
ArrayOfstring arg_5 = 5;
ArrayOfstring arg_6 = 6;
ArrayOfbool arg_7 = 7;
}
message AspirateReply {
CommandStatusMessage Ret_1 = 1;
}
message MessageRequest {
int64 arg_1 = 1;
string arg_2 = 2;
string arg_3 = 3;
bool arg_4 = 4;
}
message MessageReply {
CommandStatusMessage Ret_1 = 1;
}
message MixRequest {
int64 arg_1 = 1;
ArrayOfdouble arg_2 = 2;
ArrayOfstring arg_3 = 3;
ArrayOfint64 arg_4 = 4;
int64 arg_5 = 5;
ArrayOfstring arg_6 = 6;
ArrayOfbool arg_7 = 7;
}
message MixReply {
CommandStatusMessage Ret_1 = 1;
}
message OpenRequest {
}
message OpenReply {
CommandStatusMessage Ret_1 = 1;
}
message SetPositionStateRequest {
string arg_1 = 1;
MapstringAnyMessageMessage arg_2 = 2;
}
message SetPositionStateReply {
CommandStatusMessage Ret_1 = 1;
}
message UnloadHeadRequest {
int64 arg_1 = 1;
}
message UnloadHeadReply {
CommandStatusMessage Ret_1 = 1;
}
message LoadAdaptorRequest {
int64 arg_1 = 1;
}
message LoadAdaptorReply {
CommandStatusMessage Ret_1 = 1;
}
message GetCurrentPositionRequest {
int64 arg_1 = 1;
}
message GetCurrentPositionReply {
string Ret_1 = 1;
CommandStatusMessage Ret_2 = 2;
}
message ResetPistonsRequest {
int64 arg_1 = 1;
int64 arg_2 = 2;
}
message ResetPistonsReply {
CommandStatusMessage Ret_1 = 1;
}
message SetDriveSpeedRequest {
string arg_1 = 1;
double arg_2 = 2;
}
message SetDriveSpeedReply {
CommandStatusMessage Ret_1 = 1;
}
message AddPlateToRequest {
string arg_1 = 1;
AnyMessage arg_2 = 2;
string arg_3 = 3;
}
message AddPlateToReply {
CommandStatusMessage Ret_1 = 1;
}
message LightsOffRequest {
}
message LightsOffReply {
CommandStatusMessage Ret_1 = 1;
}
message MoveRequest {
ArrayOfstring arg_1 = 1;
ArrayOfstring arg_2 = 2;
ArrayOfint64 arg_3 = 3;
ArrayOfdouble arg_4 = 4;
ArrayOfdouble arg_5 = 5;
ArrayOfdouble arg_6 = 6;
ArrayOfstring arg_7 = 7;
int64 arg_8 = 8;
}
message MoveReply {
CommandStatusMessage Ret_1 = 1;
}
message MoveRawRequest {
int64 arg_1 = 1;
double arg_2 = 2;
double arg_3 = 3;
double arg_4 = 4;
}
message MoveRawReply {
CommandStatusMessage Ret_1 = 1;
}
message StopRequest {
}
message StopReply {
CommandStatusMessage Ret_1 = 1;
}
message GoRequest {
}
message GoReply {
CommandStatusMessage Ret_1 = 1;
}
message GetHeadStateRequest {
int64 arg_1 = 1;
}
message GetHeadStateReply {
string Ret_1 = 1;
CommandStatusMessage Ret_2 = 2;
}
message GetOutputFileRequest {
}
message GetOutputFileReply {
bytes Ret_1 = 1;
CommandStatusMessage Ret_2 = 2;
}
message GetStatusRequest {
}
message GetStatusReply {
MapstringAnyMessageMessage Ret_1 = 1;
CommandStatusMessage Ret_2 = 2;
}
message UnloadAdaptorRequest {
int64 arg_1 = 1;
}
message UnloadAdaptorReply {
CommandStatusMessage Ret_1 = 1;
}
message CloseRequest {
}
message CloseReply {
CommandStatusMessage Ret_1 = 1;
}
message ArrayOfint64{
	repeated int64 arg_1=1;
}
message ArrayOfdouble{
	repeated double arg_1=1;
}
message ArrayOfbool{
	repeated bool arg_1=1;
}
message CommandStatusMessage {
	bool Arg_1 = 1;
	int64 Arg_2 = 2;
	string Arg_3 = 3;
}
message ArrayOfstring{
	repeated string arg_1=1;
}
message PtrToLHPropertiesMessage{
	LHPropertiesMessage arg_1=1;
}
message MapstringAnyMessageMessageFieldEntry{
string key = 1;
AnyMessage value = 2;
}
message MapstringAnyMessageMessage{
repeated MapstringAnyMessageMessageFieldEntry map_field =1;
}
message LHPropertiesMessage {
    reserved 18;
	string Arg_1 = 1;
	int64 Arg_2 = 2;
	MapstringPtrToLHPositionMessageMessage Arg_3 = 3;
	MapstringAnyMessageMessage Arg_4 = 4;
	MapstringstringMessage Arg_5 = 5;
	MapstringstringMessage Arg_6 = 6;
	MapstringPtrToLHPlateMessageMessage Arg_7 = 7;
	MapstringPtrToLHTipboxMessageMessage Arg_8 = 8;
	MapstringPtrToLHTipwasteMessageMessage Arg_9 = 9;
	MapstringPtrToLHPlateMessageMessage Arg_10 = 10;
	MapstringPtrToLHPlateMessageMessage Arg_11 = 11;
	MapstringstringMessage Arg_12 = 12;
	string Arg_13 = 13;
	string Arg_14 = 14;
	string Arg_15 = 15;
	string Arg_16 = 16;
	ArrayOfPtrToLHHeadMessage Arg_17 = 17;
	//ArrayOfPtrToLHHeadMessage Arg_18 = 18; //headsloaded replaced by head assemblies
	ArrayOfPtrToLHAdaptorMessage Arg_19 = 19;
	ArrayOfPtrToLHTipMessage Arg_20 = 20;
	ArrayOfstring Arg_21 = 21;
	ArrayOfstring Arg_22 = 22;
	ArrayOfstring Arg_23 = 23;
	ArrayOfstring Arg_24 = 24;
	ArrayOfstring Arg_25 = 25;
	ArrayOfstring Arg_26 = 26;
	PtrToLHChannelParameterMessage Arg_27 = 27;
	ArrayOfPtrToLHChannelParameterMessage Arg_28 = 28;
	MapstringCoordinatesMessageMessage Arg_29 = 29;
	int64 Arg_30 = 30;
    ArrayOfPtrToLHHeadAssembliesMessage Arg_31 = 31;
}
message ArrayOfPtrToLHHeadMessage{
	repeated PtrToLHHeadMessage arg_1=1;
}
message MapstringPtrToLHPositionMessageMessageFieldEntry{
string key = 1;
PtrToLHPositionMessage value = 2;
}
message MapstringPtrToLHPositionMessageMessage{
repeated MapstringPtrToLHPositionMessageMessageFieldEntry map_field =1;
}
message MapstringPtrToLHPlateMessageMessageFieldEntry{
string key = 1;
PtrToLHPlateMessage value = 2;
}
message MapstringPtrToLHPlateMessageMessage{
repeated MapstringPtrToLHPlateMessageMessageFieldEntry map_field =1;
}
message PtrToLHAdaptorMessage{
	LHAdaptorMessage arg_1=1;
}
message PtrToLHTipMessage{
	LHTipMessage arg_1=1;
}
message LHChannelParameterMessage {
	string Arg_1 = 1;
	string Arg_2 = 2;
	string Arg_3 = 3;
	VolumeMessage Arg_4 = 4;
	VolumeMessage Arg_5 = 5;
	FlowRateMessage Arg_6 = 6;
	FlowRateMessage Arg_7 = 7;
	int64 Arg_8 = 8;
	bool Arg_9 = 9;
	int64 Arg_10 = 10;
	int64 Arg_11 = 11;
}
message LHTipboxMessage {
	string Arg_1 = 1;
	string Arg_2 = 2;
	string Arg_3 = 3;
	string Arg_4 = 4;
	int64 Arg_5 = 5;
	int64 Arg_6 = 6;
	double Arg_7 = 7;
	PtrToLHTipMessage Arg_8 = 8;
	PtrToLHWellMessage Arg_9 = 9;
	int64 Arg_10 = 10;
	ArrayOfArrayOfPtrToLHTipMessage Arg_11 = 11;
	double Arg_12 = 12;
	double Arg_13 = 13;
	double Arg_14 = 14;
	double Arg_15 = 15;
	double Arg_16 = 16;
	BBoxMessage Arg_17 = 17;
}
message MapstringPtrToLHTipwasteMessageMessageFieldEntry{
string key = 1;
PtrToLHTipwasteMessage value = 2;
}
message MapstringPtrToLHTipwasteMessageMessage{
repeated MapstringPtrToLHTipwasteMessageMessageFieldEntry map_field =1;
}
message PtrToLHChannelParameterMessage{
	LHChannelParameterMessage arg_1=1;
}
message PtrToLHTipwasteMessage{
	LHTipwasteMessage arg_1=1;
}
message MapstringPtrToLHTipboxMessageMessageFieldEntry{
string key = 1;
PtrToLHTipboxMessage value = 2;
}
message MapstringPtrToLHTipboxMessageMessage{
repeated MapstringPtrToLHTipboxMessageMessageFieldEntry map_field =1;
}
message LHAdaptorMessage {
	string Arg_1 = 1;
	string Arg_2 = 2;
	string Arg_3 = 3;
	PtrToLHChannelParameterMessage Arg_4 = 4;
	ArrayOfPtrToLHTipMessage Arg_5 = 5;
}
message MapstringCoordinatesMessageMessageFieldEntry{
string key = 1;
CoordinatesMessage value = 2;
}
message MapstringCoordinatesMessageMessage{
repeated MapstringCoordinatesMessageMessageFieldEntry map_field =1;
}
message PtrToLHPositionMessage{
	LHPositionMessage arg_1=1;
}
message LHPositionMessage {
	string Arg_1 = 1;
	string Arg_2 = 2;
	int64 Arg_3 = 3;
	ArrayOfLHDeviceMessage Arg_4 = 4;
	double Arg_5 = 5;
}
message LHPlateMessage {
	string Arg_1 = 1;
	string Arg_2 = 2;
	string Arg_3 = 3;
	string Arg_4 = 4;
	string Arg_5 = 5;
	string Arg_6 = 6;
	int64 Arg_7 = 7;
	int64 Arg_8 = 8;
	int64 Arg_9 = 9;
	MapstringPtrToLHWellMessageMessage Arg_10 = 10;
	ArrayOfArrayOfPtrToLHWellMessage Arg_11 = 11;
	ArrayOfArrayOfPtrToLHWellMessage Arg_12 = 12;
	PtrToLHWellMessage Arg_13 = 13;
	MapstringPtrToLHWellMessageMessage Arg_14 = 14;
	double Arg_15 = 15;
	double Arg_16 = 16;
	double Arg_17 = 17;
	double Arg_18 = 18;
	double Arg_19 = 19;
	BBoxMessage Arg_20 = 20;
}
message ArrayOfPtrToLHTipMessage{
	repeated PtrToLHTipMessage arg_1=1;
}
message ArrayOfPtrToLHChannelParameterMessage{
	repeated PtrToLHChannelParameterMessage arg_1=1;
}
message CoordinatesMessage {
	double Arg_1 = 1;
	double Arg_2 = 2;
	double Arg_3 = 3;
}
message MapstringstringMessageFieldEntry{
string key = 1;
string value = 2;
}
message MapstringstringMessage{
repeated MapstringstringMessageFieldEntry map_field =1;
}
message PtrToLHPlateMessage{
	LHPlateMessage arg_1=1;
}
message LHTipwasteMessage {
	string Arg_1 = 1;
	string Arg_2 = 2;
	string Arg_3 = 3;
	string Arg_4 = 4;
	int64 Arg_5 = 5;
	int64 Arg_6 = 6;
	double Arg_7 = 7;
	double Arg_8 = 8;
	double Arg_9 = 9;
	double Arg_10 = 10;
	PtrToLHWellMessage Arg_11 = 11;
	BBoxMessage Arg_12 = 12;
}
message LHHeadMessage {
    reserved 4;
	string Arg_1 = 1;
	string Arg_2 = 2;
	string Arg_3 = 3;
	//PtrToLHAdaptorMessage Arg_4 = 4;
	PtrToLHChannelParameterMessage Arg_5 = 5;
    TipLoadingBehaviourMessage Arg_6 = 6;
    int64 Arg_7 = 7; //index of the adaptor in the machine
}
message TipLoadingBehaviourMessage {
    bool Arg_1 = 1; //OverrideLoadTipsCommand
    bool Arg_2 = 2; //AutoRefillTipBoxes
    int64 Arg_3 = 3; //Loading Order: 0 = RowWise, 1 = ColumnWise
    int64 Arg_4 = 4; //VerticalDiection: 1 = top to bottom, -1 = bottom to top
    int64 Arg_5 = 5; //HorizontalDirection: 1 = left to right, -1 = bottom to top
    int64 Arg_6 = 6; //chunking behaviour: 0 = none, 1: forward, 2: reverse
}
message LHHeadAssemblyPositionMessage {
    CoordinatesMessage Offset = 1;
    int64 HeadIndex = 2;
}
message PtrToLHHeadAssemblyPositionMessage {
    LHHeadAssemblyPositionMessage val = 1;
}
message ArrayOfPtrToLHHeadAssemblyPositionMessage {
    repeated PtrToLHHeadAssemblyPositionMessage val = 1;
}
message LHHeadAssemblyMessage {
    ArrayOfPtrToLHHeadAssemblyPositionMessage Positions = 1;
    PtrToBBoxMessage MotionLimits = 2;
}
message PtrToLHHeadAssemblyMessage {
    LHHeadAssemblyMessage val = 1;
}
message ArrayOfPtrToLHHeadAssembliesMessage {
    repeated PtrToLHHeadAssemblyMessage val = 1;
}
message ArrayOfPtrToLHAdaptorMessage{
	repeated PtrToLHAdaptorMessage arg_1=1;
}
message PtrToLHHeadMessage{
	LHHeadMessage arg_1=1;
}
message PtrToLHTipboxMessage{
	LHTipboxMessage arg_1=1;
}
message VolumeMessage {
	PtrToConcreteMeasurementMessage Arg_1 = 1;
}
message FlowRateMessage {
	PtrToConcreteMeasurementMessage Arg_1 = 1;
}
message ArrayOfArrayOfPtrToLHTipMessage{
	repeated ArrayOfPtrToLHTipMessage arg_1=1;
}
message LHTipMessage {
	string Arg_1 = 1;
	string Arg_2 = 2;
	string Arg_3 = 3;
	bool Arg_4 = 4;
	VolumeMessage Arg_5 = 5;
	VolumeMessage Arg_6 = 6;
    bool Arg_7 = 7;
    PtrToShapeMessage Arg_8 = 8;
    BBoxMessage Arg_9 = 9;
    double EffectiveHeight = 10; 
}
message LHDeviceMessage {
	string Arg_1 = 1;
	string Arg_2 = 2;
	string Arg_3 = 3;
}
message ArrayOfArrayOfPtrToLHWellMessage{
	repeated ArrayOfPtrToLHWellMessage arg_1=1;
}
message LHWellMessage {
	string Arg_1 = 1;
	string Arg_2 = 2;
	WellCoordsMessage Arg_3 = 3;
	double Arg_4 = 4;
	PtrToLHComponentMessage Arg_5 = 5;
	double Arg_6 = 6;
	PtrToShapeMessage Arg_7 = 7;
	int64 Arg_8 = 8;
	BBoxMessage Arg_9 = 9;
	double Arg_10 = 10;
	MapstringAnyMessageMessage Arg_11 = 11;
}
message ArrayOfLHDeviceMessage{
	repeated LHDeviceMessage arg_1=1;
}
message PtrToLHWellMessage{
	LHWellMessage arg_1=1;
}
message BBoxMessage {
	CoordinatesMessage Arg_1 = 1;
	CoordinatesMessage Arg_2 = 2;
}
message PtrToBBoxMessage {
    BBoxMessage val = 1;
}
message ArrayOfPtrToLHWellMessage{
	repeated PtrToLHWellMessage arg_1=1;
}
message MapstringPtrToLHWellMessageMessageFieldEntry{
string key = 1;
PtrToLHWellMessage value = 2;
}
message MapstringPtrToLHWellMessageMessage{
repeated MapstringPtrToLHWellMessageMessageFieldEntry map_field =1;
}
message WellCoordsMessage {
	int64 Arg_1 = 1;
	int64 Arg_2 = 2;
}
message PtrToLHComponentMessage{
	LHComponentMessage arg_1=1;
}
message ShapeMessage {
	string Arg_1 = 1;
	string Arg_2 = 2;
	double Arg_3 = 3;
	double Arg_4 = 4;
	double Arg_5 = 5;
}
message PtrToShapeMessage{
	ShapeMessage arg_1=1;
}
message ConcreteMeasurementMessage {
	double Arg_1 = 1;
	PtrToGenericPrefixedUnitMessage Arg_2 = 2;
}
message PtrToConcreteMeasurementMessage{
	ConcreteMeasurementMessage arg_1=1;
}
message LHComponentMessage {
	string Arg_1 = 1;
	BlockIDMessage Arg_2 = 2;
	string Arg_3 = 3;
	string Arg_4 = 4;
	string Arg_5 = 5;
	int64 Arg_6 = 6;
	string Arg_7 = 7;
	string Arg_8 = 8;
	double Arg_9 = 9;
	double Arg_10 = 10;
	string Arg_11 = 11;
	string Arg_12 = 12;
	double Arg_13 = 13;
	double Arg_14 = 14;
	double Arg_15 = 15;
	double Arg_16 = 16;
	MapstringAnyMessageMessage Arg_17 = 17;
	string Arg_18 = 18;
	string Arg_19 = 19;
    MapstringAnyMessageMessage Arg_20 = 20;
}
message GenericPrefixedUnitMessage {
	GenericUnitMessage Arg_1 = 1;
	SIPrefixMessage Arg_2 = 2;
}
message PtrToGenericPrefixedUnitMessage{
	GenericPrefixedUnitMessage arg_1=1;
}
message BlockIDMessage {
	string Arg_1 = 1;
}
message GenericUnitMessage {
	string Arg_1 = 1;
	string Arg_2 = 2;
	double Arg_3 = 3;
	string Arg_4 = 4;
}
message SIPrefixMessage {
	string Arg_1 = 1;
	double Arg_2 = 2;
}

message TransferRequest{
	repeated string Arg_1 = 1;
	repeated string Arg_2 = 2;
	repeated string Arg_3 = 3;
	repeated string	Arg_4 = 4;
	repeated string Arg_5 = 5;
	repeated double Arg_6 = 6;
}

message TransferReply{
	CommandStatusMessage Ret_1 = 1;
}

