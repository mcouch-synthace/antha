// Code generated by protoc-gen-go. DO NOT EDIT.
// source: github.com/antha-lang/antha/driver/antha_platereader_v1/platereader.proto

/*
Package antha_platereader_v1 is a generated protocol buffer package.

It is generated from these files:
	github.com/antha-lang/antha/driver/antha_platereader_v1/platereader.proto

It has these top-level messages:
	ProtocolRunRequest
	BoolReply
*/
package antha_platereader_v1

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type ProtocolRunRequest struct {
	ProtocolName    string `protobuf:"bytes,1,opt,name=ProtocolName" json:"ProtocolName,omitempty"`
	PlateID         string `protobuf:"bytes,2,opt,name=PlateID" json:"PlateID,omitempty"`
	PlateLayout     string `protobuf:"bytes,3,opt,name=PlateLayout" json:"PlateLayout,omitempty"`
	ProtocolOptions string `protobuf:"bytes,4,opt,name=ProtocolOptions" json:"ProtocolOptions,omitempty"`
}

func (m *ProtocolRunRequest) Reset()                    { *m = ProtocolRunRequest{} }
func (m *ProtocolRunRequest) String() string            { return proto.CompactTextString(m) }
func (*ProtocolRunRequest) ProtoMessage()               {}
func (*ProtocolRunRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *ProtocolRunRequest) GetProtocolName() string {
	if m != nil {
		return m.ProtocolName
	}
	return ""
}

func (m *ProtocolRunRequest) GetPlateID() string {
	if m != nil {
		return m.PlateID
	}
	return ""
}

func (m *ProtocolRunRequest) GetPlateLayout() string {
	if m != nil {
		return m.PlateLayout
	}
	return ""
}

func (m *ProtocolRunRequest) GetProtocolOptions() string {
	if m != nil {
		return m.ProtocolOptions
	}
	return ""
}

type BoolReply struct {
	Result bool `protobuf:"varint,1,opt,name=result" json:"result,omitempty"`
}

func (m *BoolReply) Reset()                    { *m = BoolReply{} }
func (m *BoolReply) String() string            { return proto.CompactTextString(m) }
func (*BoolReply) ProtoMessage()               {}
func (*BoolReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *BoolReply) GetResult() bool {
	if m != nil {
		return m.Result
	}
	return false
}

func init() {
	proto.RegisterType((*ProtocolRunRequest)(nil), "antha.platereader.v1.ProtocolRunRequest")
	proto.RegisterType((*BoolReply)(nil), "antha.platereader.v1.BoolReply")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for PlateReader service

type PlateReaderClient interface {
	PRRunProtocolByName(ctx context.Context, in *ProtocolRunRequest, opts ...grpc.CallOption) (*BoolReply, error)
}

type plateReaderClient struct {
	cc *grpc.ClientConn
}

func NewPlateReaderClient(cc *grpc.ClientConn) PlateReaderClient {
	return &plateReaderClient{cc}
}

func (c *plateReaderClient) PRRunProtocolByName(ctx context.Context, in *ProtocolRunRequest, opts ...grpc.CallOption) (*BoolReply, error) {
	out := new(BoolReply)
	err := grpc.Invoke(ctx, "/antha.platereader.v1.PlateReader/PRRunProtocolByName", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for PlateReader service

type PlateReaderServer interface {
	PRRunProtocolByName(context.Context, *ProtocolRunRequest) (*BoolReply, error)
}

func RegisterPlateReaderServer(s *grpc.Server, srv PlateReaderServer) {
	s.RegisterService(&_PlateReader_serviceDesc, srv)
}

func _PlateReader_PRRunProtocolByName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProtocolRunRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlateReaderServer).PRRunProtocolByName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/antha.platereader.v1.PlateReader/PRRunProtocolByName",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlateReaderServer).PRRunProtocolByName(ctx, req.(*ProtocolRunRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _PlateReader_serviceDesc = grpc.ServiceDesc{
	ServiceName: "antha.platereader.v1.PlateReader",
	HandlerType: (*PlateReaderServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "PRRunProtocolByName",
			Handler:    _PlateReader_PRRunProtocolByName_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "github.com/antha-lang/antha/driver/antha_platereader_v1/platereader.proto",
}

func init() {
	proto.RegisterFile("github.com/antha-lang/antha/driver/antha_platereader_v1/platereader.proto", fileDescriptor0)
}

var fileDescriptor0 = []byte{
	// 251 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x6c, 0x50, 0xdd, 0x4a, 0xc3, 0x30,
	0x14, 0xb6, 0x2a, 0xd3, 0x1d, 0x05, 0x21, 0x8a, 0x04, 0x6f, 0x1c, 0xf5, 0xa6, 0x37, 0xa6, 0x4c,
	0xdf, 0x60, 0x78, 0x33, 0x10, 0x2d, 0x79, 0x81, 0x91, 0x6e, 0x87, 0xad, 0x90, 0x25, 0x5d, 0x9a,
	0x14, 0xfa, 0x32, 0x3e, 0xab, 0xec, 0x6c, 0x91, 0xaa, 0xbd, 0x3b, 0xdf, 0x0f, 0xdf, 0xf9, 0xce,
	0x81, 0xf9, 0xba, 0xf2, 0x9b, 0x50, 0x8a, 0xa5, 0xdd, 0xe6, 0xca, 0xf8, 0x8d, 0x7a, 0xd6, 0xca,
	0xac, 0x0f, 0x63, 0xbe, 0x72, 0x55, 0x8b, 0xee, 0x00, 0x16, 0xb5, 0x56, 0x1e, 0x1d, 0xaa, 0x15,
	0xba, 0x45, 0x3b, 0xcd, 0x7b, 0x50, 0xd4, 0xce, 0x7a, 0xcb, 0xee, 0xc8, 0x27, 0xfa, 0x42, 0x3b,
	0x4d, 0xbf, 0x12, 0x60, 0xc5, 0x5e, 0x5f, 0x5a, 0x2d, 0x83, 0x91, 0xb8, 0x0b, 0xd8, 0x78, 0x96,
	0xc2, 0x75, 0x64, 0x3f, 0xd4, 0x16, 0x79, 0x32, 0x49, 0xb2, 0xb1, 0xfc, 0xc5, 0x31, 0x0e, 0x17,
	0xc5, 0x3e, 0x6c, 0xfe, 0xc6, 0x4f, 0x49, 0x8e, 0x90, 0x4d, 0xe0, 0x8a, 0xc6, 0x77, 0xd5, 0xd9,
	0xe0, 0xf9, 0x19, 0xa9, 0x7d, 0x8a, 0x65, 0x70, 0x13, 0xb3, 0x3e, 0x6b, 0x5f, 0x59, 0xd3, 0xf0,
	0x73, 0x72, 0xfd, 0xa5, 0xd3, 0x27, 0x18, 0xcf, 0xac, 0xd5, 0x12, 0x6b, 0xdd, 0xb1, 0x7b, 0x18,
	0x39, 0x6c, 0x82, 0xf6, 0x54, 0xe8, 0x52, 0x1e, 0xd1, 0xcb, 0xee, 0xb8, 0x50, 0xd2, 0x5d, 0xac,
	0x84, 0xdb, 0x42, 0xca, 0x60, 0x62, 0xd6, 0xac, 0xa3, 0xc2, 0x99, 0x18, 0x7a, 0x81, 0xf8, 0x7f,
	0xfe, 0xc3, 0xe3, 0xb0, 0xf3, 0xa7, 0x48, 0x7a, 0x52, 0x8e, 0xe8, 0xab, 0xaf, 0xdf, 0x01, 0x00,
	0x00, 0xff, 0xff, 0x65, 0x42, 0x37, 0x33, 0xa2, 0x01, 0x00, 0x00,
}
